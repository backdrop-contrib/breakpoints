<?php

define('RESP_IMG_CLASS', 'resp-img-picture');
define('RESP_IMG_SEPARATOR', '__');

define('RESP_IMG_SOURCE_TYPE_THEME', 'theme');
define('RESP_IMG_SOURCE_TYPE_MODULE', 'module');
define('RESP_IMG_SOURCE_TYPE_CUSTOM', 'custom');

/**
 * Implements hook_enable().
 * Import breakpoints from all enabled themes.
 */
function resp_img_enable() {
  config_install_default_config('resp_img');
  $themes = list_themes();
  resp_img_themes_enabled(array_keys($themes));
}

/**
 * Implements hook_themes_enabled();
 * Import breakpoints from all new enabled themes.
 */
function resp_img_themes_enabled($theme_list) {
  $themes = list_themes();
  foreach ($theme_list as $theme_key) {
    if (isset($themes[$theme_key]->info['resp_img'])) {
      $weight = 0;
      $theme_settings = $themes[$theme_key]->info['resp_img'];
      foreach ($theme_settings as $name => $breakpoint) {
        $suffix = resp_img_suffix_empty_object();
        $suffix->name = $name;
        $suffix->suffix = RESP_IMG_SEPARATOR . $name;
        $suffix->breakpoint = $breakpoint;
        $suffix->source = $theme_key;
        $suffix->source_type = 'theme';
        $suffix->theme = '';
        $suffix->status = TRUE;
        $suffix->weight = $weight++;
        resp_img_suffix_save($suffix);
      }
    }
  }
}

/**
 * Implements hook_themes_disabled();
 * Remove breakpoints from all disabled themes.
 */
function resp_img_themes_disabled($theme_list) {
  $themes = list_themes();
  foreach ($theme_list as $theme_key) {
    $suffixes = resp_img_suffix_load_all_theme($theme_key);
    foreach ($suffixes as $suffix) {
      resp_img_suffix_delete($suffix, $theme_key);
    }
  }
  menu_cache_clear_all();
}

/**
 * Implements hook_menu().
 */
function resp_img_menu() {
  $items = array();

  $items['admin/config/media/resp_img'] = array(
    'title' => 'Responsive images and styles',
    'description' => 'Define suffixes and breakpoints',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('resp_img_admin_suffixes'),
    'access arguments' => array('administer image styles'),
    'file' => 'resp_img.admin.inc',
    'weight' => 10,
  );

  foreach (list_themes() as $key => $theme) {
    $items['admin/config/media/resp_img/' . $theme->name] = array(
      'title' => $theme->info['name'],
      'page arguments' => array('resp_img_admin_suffixes', $theme->name),
      'type' => MENU_LOCAL_TASK,
      'access arguments' => array('administer image styles'),
      'file' => 'resp_img.admin.inc',
      'weight' => 15,
    );
    $items['admin/config/media/resp_img/' . $theme->name . '/%/%'] = array(
      'title' => $theme->info['name'],
      'page arguments' => array('resp_img_admin_suffix_actions_form', $theme->name, 5, 6),
      'type' => MENU_CALLBACK,
      'access arguments' => array('administer image styles'),
      'file' => 'resp_img.admin.inc',
      'weight' => 15,
    );
    if ($key == variable_get('theme_default', 'stark')) {
      $items['admin/config/media/resp_img/' . $theme->name]['weight'] = 11;
      $items['admin/config/media/resp_img/' . $theme->name]['type'] = MENU_DEFAULT_LOCAL_TASK;
    }
  }

  $items['admin/config/media/resp_img/create_style'] = array(
    'title' => 'Add responsive style',
    'description' => 'Add a responsive image style',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('resp_img_add_style_form'),
    'access arguments' => array('administer image styles'),
    'file' => 'resp_img.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );

  return $items;
}

/**
 * Load general settings.
 */
function resp_img_settings() {
  $config = config('resp_img');
  if ($config->isNew()) {
    return FALSE;
  }
  return (object)$config->get();
}

/**
 * Save general settings.
 */
function resp_img_settings_save($default_suffix, $block_enabled) {
  $config = config('resp_img');
  if ($config->isNew()) {
    return FALSE;
  }
  $config->set('default_suffix', $default_suffix);
  $config->set('block_enabled', $block_enabled);
  $config->save();
}

/**
 * Load name of default suffix.
 */
function resp_img_suffix_default_name($theme_key = '') {
  static $default_suffix = FALSE;
  if ($default_suffix === FALSE) {
    $default_suffix = '';
    if ($theme_key == '') {
      $theme_key = variable_get('theme_default', 'stark');
    }
    if (theme_get_setting('resp_img_use_default', $theme_key)) {
      $themes = list_themes();
      if (isset($themes[$theme_key]->info['resp_img_default_suffix'])) {
        $default_suffix = $themes[$theme_key]->info['resp_img_default_suffix'];
      }
    }
    else {
      $config = config('resp_img');
      if (!$config->isNew()) {
        $default_suffix = $config->get('default_suffix');
      }
    }
  }
  return $default_suffix;
}

/**
 * Load default suffix.
 */
function resp_img_suffix_default($theme_key = '') {
  $default_suffix = resp_img_suffix_default_name($theme_key);
  if ($default_suffix && strpos($default_suffix, RESP_IMG_SEPARATOR) !== 0) {
    $default_suffix = RESP_IMG_SEPARATOR . $default_suffix;
  }
  return $default_suffix;
}

/**
 * Sort suffixes by weight.
 */
function _resp_img_sort_by_weight($a, $b) {
  if (isset($a->weight) && isset($b->weight)) {
    if ($a->weight == $b->weight) {
      return 0;
    }
    return ($a->weight < $b->weight) ? -1 : 1;
  }
  return 0;
}

/**
 * Construct config name.
 */
function resp_img_suffix_config_name($resp_img_suffix) {
  if (is_string($resp_img_suffix)) {
    return $resp_img_suffix;
  }
  else {
    return 'resp_img'
      . '.' . $resp_img_suffix->source_type
      . '.' . $resp_img_suffix->source
      . '.' . $resp_img_suffix->name;
  }
}

/**
 * Load a single suffix.
 */
function resp_img_suffix_load($name, $source, $source_type) {
  return resp_img_suffix_load_by_fullkey(resp_img_suffix_config_name($name, $source, $source_type));
}

/**
 * Load a single suffix using the full config key.
 */
function resp_img_suffix_load_by_fullkey($name) {
  $config = config($name);
  if ($config->isNew()) {
    return FALSE;
  }
  return (object)$config->get();
}

/**
 * Load all suffixes.
 */
function resp_img_suffix_load_all($theme_key = '') {
  $suffixes_user = resp_img_suffix_load_all_custom($theme_key);
  $suffixes_module = resp_img_suffix_load_all_module();
  $suffixes_theme = resp_img_suffix_load_all_theme($theme_key);
  $suffixes = array_merge($suffixes_theme, $suffixes_module, $suffixes_user);
  uasort($suffixes, '_resp_img_sort_by_weight');
  return $suffixes;
}

/**
 * Load all enabled suffixes.
 */
function resp_img_suffix_load_all_active($theme_key = '') {
  $suffixes = resp_img_suffix_load_all($theme_key);
  $enabled = array();
  if (!empty($suffixes)) {
    foreach ($suffixes as $suffix_name => $suffix) {
      if ($suffix->status) {
        $enabled[$suffix_name] = $suffix;
      }
    }
  }
  return $enabled;
}

/**
 * Load all suffixes by source type.
 */
function _resp_img_suffix_load_all_by_type($source_type, $source = '') {
  $suffixes = array();
  // $name has to end in a dot.
  $name = 'resp_img.' . $source_type . '.';
  if (isset($source) && !empty($source)) {
    $name .= $source . '.';
  }
  $suffix_names = config_get_storage_names_with_prefix($name);
  foreach ($suffix_names as $suffix_name) {
    $suffixes[$suffix_name] = resp_img_suffix_load_by_fullkey($suffix_name);
  }
  uasort($suffixes, '_resp_img_sort_by_weight');
  return $suffixes;
}

/**
 * Load all custom suffixes.
 */
function resp_img_suffix_load_all_custom($theme_key = '') {
  $suffixes = _resp_img_suffix_load_all_by_type(RESP_IMG_SOURCE_TYPE_CUSTOM);
  if (!empty($theme_key)) {
    $theme_suffixes = array();
    foreach ($suffixes as $suffix_name => $suffix) {
      if (!isset($suffix->theme) || empty($suffix->theme) || $suffix->theme == $theme_key) {
        $theme_suffixes[$suffix_name] = $suffix;
      }
    }
    $suffixes = $theme_suffixes;
  }
  return $suffixes;
}

/**
 * Load all user defined suffixes.
 */
function resp_img_suffix_load_all_module() {
  return _resp_img_suffix_load_all_by_type(RESP_IMG_SOURCE_TYPE_MODULE);
}

/**
 * Load all suffixes from the theme.
 */
function resp_img_suffix_load_all_theme($theme_key = '') {
  if ($theme_key == '') {
    $theme_key = variable_get('theme_default', 'stark');
  }
  return _resp_img_suffix_load_all_by_type(RESP_IMG_SOURCE_TYPE_THEME, $theme_key);
}

/**
 * Empty suffix object.
 */
function resp_img_suffix_empty_object() {
  return (object)resp_img_suffix_empty_array();
}

/**
 * Empty suffix array.
 */
function resp_img_suffix_empty_array() {
  return array(
    'name' => '',
    'suffix' => '',
    'breakpoint' => '',
    'source' => '',
    'source_type' => '',
    'theme' => '',
    'status' => '',
    'weight' => 0,
    'theme' => '',
  );
}

/**
 * Save a single suffix.
 */
function resp_img_suffix_save($resp_img_suffix) {
  $name = resp_img_suffix_config_name($resp_img_suffix);
  $config = config($name);

  $config->set('name', $resp_img_suffix->name);
  $config->set('suffix', $resp_img_suffix->suffix);
  $config->set('breakpoint', $resp_img_suffix->breakpoint);
  $config->set('source', $resp_img_suffix->source);
  $config->set('source_type', $resp_img_suffix->source_type);
  $config->set('theme', $resp_img_suffix->theme);
  $config->set('status', $resp_img_suffix->status);
  $config->set('weight', $resp_img_suffix->weight);
  $config->save();

  return $resp_img_suffix;
}

/**
 * Delete a single suffix.
 */
function resp_img_suffix_delete($resp_img_suffix, $theme_key = '') {
  $name = resp_img_suffix_config_name($resp_img_suffix);
  if ($config && !$config->isNew()) {
    $config = config($name);
    $config->delete();
  }
}

/**
 * Toggle status of a single suffix.
 */
function resp_img_suffix_toggle_status($resp_img_suffix) {
  $name = resp_img_suffix_config_name($resp_img_suffix);
  $config = config($name);
  if ($config && !$config->isNew()) {
    $config->set('status', !$config->get('status'));
    $config->save();
  }
}

/**
 * Add javascript for older browser support
 */
function resp_img_add_js() {
  static $added = FALSE;
  if (!$added) {
    $added = TRUE;
    drupal_add_js(drupal_get_path('module', 'resp_img') . '/picturefill/matchmedia.js', array('type' => 'file', 'weight' => -10, 'group' => JS_DEFAULT));
    drupal_add_js(drupal_get_path('module', 'resp_img') . '/picturefill/picturefill.js', array('type' => 'file', 'weight' => -10, 'group' => JS_DEFAULT));
    drupal_add_css(drupal_get_path('module', 'resp_img') . '/css/resp_img.css', array('type' => 'file', 'weight' => -10));
  }
}

/**
 * Implements hook_theme().
 */
function resp_img_theme() {
  return array(
    'resp_img_admin_suffixes_table' => array(
      'render element' => 'form',
      'theme_key' => NULL,
    ),
    'picture' => array(
      'variables' => array(
        'style_name' => NULL,
        'path' => NULL,
        'width' => NULL,
        'height' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
        'breakpoints' => array(),
      ),
    ),
    'picture_formatter' => array(
      'variables' => array(
        'item' => NULL,
        'path' => NULL,
        'image_style' => NULL,
        'breakpoints' => array(),
      ),
    ),
  );
}

/**
 * Implements hook_preprocess_field().
 */
function resp_img_field_attach_view_alter(&$output, $context) {
  foreach (element_children($output) as $field_name) {
    $element = &$output[$field_name];
    if ($element['#field_type'] == 'image') {
      $instance = field_info_instance($element['#entity_type'], $element['#field_name'], $element['#bundle']);
      if (isset($instance['display'][$context['view_mode']])) {
        $settings = $instance['display'][$context['view_mode']]['settings'];
      }
      else {
        $settings = $instance['display']['default']['settings'];
      }
      if (isset($settings['resp_img_responsive']) && $settings['resp_img_responsive']) {
        $suffix_styles = array();
        foreach ($settings['resp_img'] as $suffix_name => $image_style) {
          if (!empty($settings['resp_img'][$suffix_name])) {
            $suffix_styles[$suffix_name] = $image_style;
          }
        }
      }

      $element['#formatter'] = 'picture';

      $num_fields = count($element['#items']);
      if (!empty($suffix_styles)) {
        for ($delta = 0; $delta < $num_fields; $delta++) {
          $element[$delta]['#theme'] = 'picture_formatter';
          $element[$delta]['#breakpoints'] = $suffix_styles;
        }
      }
      else {
        for ($delta = 0; $delta < $num_fields; $delta++) {
          $element[$delta]['#theme'] = 'picture_formatter';
          $element[$delta]['#breakpoints'] = 'all';
        }
      }
    }
  }
}

function theme_picture_formatter($variables) {
  if (!isset($variables['breakpoints']) || empty($variables['breakpoints'])) {
    return theme('image_formatter', $variables);
  }

  resp_img_add_js();
  $item = $variables['item'];

  // Do not output an empty 'title' attribute.
  if (isset($item['title']) && drupal_strlen($item['title']) == 0) {
    unset($item['title']);
  }

  $item['style_name'] = $variables['image_style'];
  $item['breakpoints'] = $variables['breakpoints'];
  $output = theme('picture', $item);

  if (isset($variables['path']['path'])) {
    $path = $variables['path']['path'];
    $options = isset($variables['path']['options']) ? $variables['path']['options'] : array();
    $options['html'] = TRUE;
    $output = l($output, $path, $options);
  }

  return $output;
}

/**
 * Theme a picture element.
 */
function theme_picture($variables) {
  if (!isset($variables['attributes'])) {
    $variables['attributes'] = array();
  }
  if (!isset($variables['attributes']['class'])) {
    $variables['attributes']['class'] = array();
  }
  $variables['attributes']['class'][] = RESP_IMG_CLASS;

  // Make sure that width and height are proper values
  if (isset($variables['width']) && empty($variables['width'])) {
    unset($variables['width']);
    unset($variables['height']);
  }
  elseif (isset($variables['height']) && empty($variables['height'])) {
    unset($variables['width']);
    unset($variables['height']);
  }

  $images = array();
  $output = array();

  // User didn't map any breakpoints, use suffixes
  if (!is_array($variables['breakpoints'])) {
    $default_suffix = resp_img_suffix_default();
    if ($default_suffix && strpos($variables['style_name'], $default_suffix)) {
      $suffixes = resp_img_suffix_load_all_active();
      $image_styles = image_styles();

      // loop over all suffixes
      foreach ($suffixes as $suffix) {
        // detect the default one
        if ($suffix->suffix == $default_suffix) {
          $images[] = array(
            'image' => theme_image_style($variables),
          );
        }
        else {
          $new_image = $variables;
          $new_image['style_name'] = str_replace($default_suffix, $suffix->suffix, $variables['style_name']);
          if (array_key_exists($new_image['style_name'], $image_styles)) {
            $images[] = array(
              'image' => theme_image_style($new_image),
              'media' => $suffix->breakpoint,
            );
          }
        }
      }
    }
  }
  // Use mapped styles by hand.
  else {
    $images[] = array(
      'image' => theme_image_style($variables),
    );
    foreach ($variables['breakpoints'] as $suffix_name => $image_style) {
      $suffix = resp_img_suffix_load_by_fullkey($suffix_name);
      if ($suffix) {
        $new_image = $variables;
        $new_image['style_name'] = $image_style;
        $images[] = array(
          'image' => theme_image_style($new_image),
          'media' => $suffix->breakpoint,
        );
      }
    }
  }

  $output[] = '<picture alt="' . check_plain($variables['alt']) . '" title="' . check_plain($variables['title']) . '">';

  // add variants to the output
  foreach ($images as $image) {
    if (isset($image['media']) && !empty($image['media'])) {
      $output[] = '<!-- <source media="' . $image['media'] . '" ' . str_replace('<img', '', $image['image']) . ' -->';
      $output[] = '<source media="' . $image['media'] . '" ' . str_replace('<img', '', $image['image']);
    }
    else {
      $output[] = '<!-- <source ' . str_replace('<img', '', $image['image']) . ' -->';
      $output[] = '<source ' . str_replace('<img', '', $image['image']);
    }
  }

  // output the default image as fallback
  // $output .= '<img src="' . image_style_url($variables['style_name'], $variables['uri']) . '" alt="' . check_plain($variables['alt']) . '" />';
  $output[] = '<noscript>' . $images[0]['image'] . '</noscript>';
  $output[] = '</picture>';
  return implode("\n", $output);
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function resp_img_field_formatter_info_alter(&$info) {
  foreach ($info as $formatter_key => &$formatter) {
    if ($formatter_key == 'image') {
      if (!isset($formatter['settings']) || !is_array($formatter['settings'])) {
        $formatter['settings'] = array();
      }
      $formatter['settings'] += array(
        'resp_img_responsive' => FALSE,
        'resp_img' => array(),
      );
    }
  }
}

/**
 * Implements hook_field_formatter_settings_form_alter().
 */
function resp_img_field_formatter_settings_form_alter(&$element, &$form_state, $context) {
  if (isset($context['field']['type']) && $context['field']['type'] === 'image') {
    $settings = $context['instance']['display'][$context['view_mode']]['settings'];
    $theme_suffixes = resp_img_suffix_load_all_active();
    if (!empty($theme_suffixes)) {
      $element['resp_img_responsive'] = array(
        '#type' => 'checkbox',
        '#title' => t('Go responsive'),
        '#default_value' => isset($settings['resp_img_responsive']) ? $settings['resp_img_responsive'] : FALSE,
        // @todo: needs better wording
        '#description' => t('If you enable this, you can select an image style for each defined suffix/breakpoint.<br />
          The image style at the top will be used as default/fallback.<br />
          If you leave all dropdowns empty the logic will try to use the default suffix.'),
      );

      $element['resp_img'] = array(
        '#type' => 'container',
        '#states' => array(
          'invisible' => array(
            'input[name="fields[field_image][settings_edit_form][settings][resp_img_responsive]"]' => array('checked' => FALSE),
          ),
        ),
      );

      $image_styles = image_style_options(TRUE);
      foreach ($theme_suffixes as $suffix_name => $suffix) {
        $label = $suffix->name . ' [' . $suffix->breakpoint . ']';
        $element['resp_img'][$suffix_name] = array(
          '#title' => check_plain($label),
          '#type' => 'select',
          '#options' => $image_styles,
          '#default_value' => isset($settings['resp_img'][$suffix_name]) ? $settings['resp_img'][$suffix_name] : '',
        );
      }
    }
  }
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function resp_img_field_formatter_settings_summary_alter(&$summary, $context) {
  if (isset($context['field']['type']) && $context['field']['type'] === 'image') {
    $settings = $context['instance']['display'][$context['view_mode']]['settings'];
    if (isset($settings['resp_img_responsive']) && $settings['resp_img_responsive']) {
      $summary .= '<br />Responsive mode activated';
    }
  }
}

