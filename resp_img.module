<?php

// @todo: refactor picture tag in separate function

/**
 * Implements hook_ctools_plugin_directory()
 */
function resp_img_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'export_ui') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_menu().
 */
function resp_img_menu() {
  $items = array();

  $items['admin/config/media/resp_img/settings'] = array(
    'title' => 'Settings',
    'description' => 'Responsive images and styles',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('resp_img_admin_settings'),
    'access arguments' => array('administer image styles'),
    'file' => 'resp_img.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/media/resp_img/create_style'] = array(
    'title' => 'Add responsive style',
    'description' => 'Add a responsive image style',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('resp_img_add_style_form'),
    'access arguments' => array('administer image styles'),
    'file' => 'resp_img.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
* Load a single suffix
*/
function resp_img_suffix_load($name) {
  ctools_include('export');
  $result = ctools_export_load_object('resp_img_suffix', 'names', array($name));
  if (isset($result[$name])) {
    return $result[$name];
  }
}

/**
 * Load all suffixes
 */
function resp_img_suffix_load_all() {
  ctools_include('export');
  return ctools_export_load_object('resp_img_suffix');
}

/**
* Save a single suffix
*/
function resp_img_suffix_save(&$resp_img_suffix) {
  $update = (isset($resp_img_suffix->id) && is_numeric($resp_img_suffix->id)) ? array('id') : array();
  return drupal_write_record('resp_img_suffix', $resp_img_suffix, $update);
}

/**
 * Load suffix and breakpoint for all suffixes
 */
function resp_img_suffix_load_all_breakpoints() {
  static $widths = array();
  if (empty($widths)) {
    $suffixes = resp_img_suffix_load_all();
    foreach ($suffixes as $suffix) {
      $widths[$suffix->suffix] = (int)$suffix->breakpoint;
    }
    $widths[variable_get('resp_img_default_suffix', '')] = 1;
    arsort($widths);
  }
  return $widths;
}

/**
 * Add cookie support, script and settings
 */
function resp_img_add_js() {
  static $added = FALSE;
  if (!$added) {
    $added = TRUE;
    drupal_add_js(drupal_get_path('module', 'resp_img') . '/picturefill/matchmedia.js', array('type' => 'file', 'weight' => -10, 'group' => JS_DEFAULT));
    drupal_add_js(drupal_get_path('module', 'resp_img') . '/picturefill/picturefill.js', array('type' => 'file', 'weight' => -10, 'group' => JS_DEFAULT));
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function resp_img_theme_registry_alter(&$theme_registry) {
  foreach ($theme_registry as $key => $info) {
    if (variable_get('resp_img_mode', RESP_IMG_MODE_DEFAULT) == RESP_IMG_MODE_PICTURE) {
      if ($key == 'image_style') {
        $theme_registry[$key]['function'] = '_resp_img_pp_image_style';
      }
    }
  }
}

/**
 * Support for general images.
 */

function _resp_img_pp_image_style($variables) {
  // @TODO: check if we have a responsive style
  // style_name == $default_suffix
  resp_img_add_js();
  $default_suffix = variable_get('resp_img_default_suffix', '');
  $images = array();
  $output = '';

  $output .= '<span data-picture data-alt="' . check_plain($variables['alt']) . '">';

  $suffixes = resp_img_suffix_load_all();
  // loop over all suffixes
  foreach ($suffixes as $suffix) {
    // detect the default one
    if ($suffix->suffix == $default_suffix) {
      $output .= '<span data-src="' . image_style_url($variables['style_name'], $variables['uri']) . '"></span>';
    }
    else {
      $images[(int)$suffix->breakpoint] = array(
        'src' => image_style_url(str_replace($default_suffix, $suffix->suffix, $variables['style_name']), $variables['uri']),
      );
    }
  }
  // sort by size
  asort($images);

  // add variants to the output
  foreach ($images as $min_width => $image) {
    $output .= '<span data-src="' . $image['src'] . '" data-media="(min-width: ' . $min_width . 'px)"></span>';
  }

  // output the default image as fallback
  // $output .= '<img src="' . image_style_url($variables['style_name'], $variables['uri']) . '" alt="' . check_plain($variables['alt']) . '" />';
  $output .= '<noscript><img src="' . image_style_url($variables['style_name'], $variables['uri']) . '" alt="' . check_plain($variables['alt']) . '" /></noscript>';
  $output .= '</span>';
  return $output;
}

/**
 * Implements hook_form_alter().
 */
function resp_img_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'field_ui_field_edit_form') {
    if ($form['#instance']['widget']['module'] == 'text') {
      $form['resp_img'] = array(
        '#title' => t('Responsive images and styles'),
        '#type' => 'fieldset',
        '#collapsible' => FALSE,
      );

      $form['resp_img']['use_for_resp_img'] = array(
        '#type' => 'checkbox',
        '#title' => t('Apply responsive images and styles to this field'),
        //variable_get('resp_img_*entitytype*_*bundle*_*fieldname*, 0)
        '#default_value' => variable_get('resp_img_' . $form['instance']['entity_type']['#value'] . '_' . $form['instance']['bundle']['#value'] . '_' . $form['instance']['field_name']['#value'], 0),
        '#description' => t('If selected, responsive images and styles will be applied to the content of this field.'),
      );

      $form['#submit'][] = 'resp_img_add_entity_type_field';
    }

  }
}

function resp_img_add_entity_type_field($form, &$form_state) {
  variable_set('resp_img_' . $form['instance']['entity_type']['#value'] . '_' . $form['instance']['bundle']['#value'] . '_' . $form['instance']['field_name']['#value'],  $form_state['values']['use_for_resp_img']);
}

/**
 * Implements hook_entity_view_alter().
 */
function resp_img_entity_view_alter(&$build, $type) {
  foreach (element_children($build) as $child) {
    if (isset($build[$child]['#field_name'])) {
      if (variable_get('resp_img_' . $build['#entity_type'] . '_' . $build['#bundle'] . '_' . $build[$child]['#field_name'], 0)) {
        $build[$child]['#post_render'][] = 'resp_img_post_render';
      }
    }
  }
}

function resp_img_post_render($content, $element) {
  return _resp_img_replace_picture($content);
}

function _resp_img_replace_picture($content) {
  $result = array();
  preg_match_all('/<img[^>]+>/i', $content, $result);
  $orig_imgs = $imgs = $result[0];
  $default_suffix = variable_get('resp_img_default_suffix', '');
  if (!empty($default_suffix)) {

    $sfx = resp_img_suffix_load_all();
    $suffixes = array();
    foreach ($sfx as $suffix) {
      $suffixes[] = $suffix->suffix;
    }
    $imgs = str_replace($suffixes, $default_suffix, $imgs);
    foreach ($imgs as &$img) {
      if (strpos($img, $default_suffix) !== FALSE) {
        resp_img_add_js();
        $img = preg_replace('/(height|width)=("[^"]*")/i', "", $img);
        $xml  = simplexml_load_string('<image>' . html_entity_decode($img, ENT_QUOTES, "utf-8") . '</image>');
        $img_data = array();
        foreach($xml->img[0]->attributes() as $a => $b) {
          $img_data[$a] = (string)$b;
        }
        // convert src to URI
        // @todo: Ugly! Find a better way?
        $src = substr($img_data['src'], strpos($img_data['src'], $default_suffix) + strlen($default_suffix) + 1);
        $count = 1;
        $src = preg_replace('/\//', '://', $src, 1);

        $images = array();
        $output = '';

        $output .= '<span data-picture data-alt="' . check_plain($img_data['alt']) . '">';

        // @todo: extract stylename from src
        $style_name = 'bartik_mobile';

        // loop over all suffixes
        foreach ($sfx as $suffix) {
          // detect the default one
          if ($suffix->suffix == $default_suffix) {
            $output .= '<span data-src="' . image_style_url($style_name, $src) . '"></span>';
          }
          else {
            $images[(int)$suffix->breakpoint] = array(
              'src' => image_style_url(str_replace($default_suffix, $suffix->suffix, $style_name), $src),
            );
          }
        }
        // sort by size
        asort($images);

        // add variants to the output
        foreach ($images as $min_width => $image) {
          $output .= '<span data-src="' . $image['src'] . '" data-media="(min-width: ' . $min_width . 'px)"></span>';
        }

        // output the default image as fallback
        $output .= '<noscript><img src="' . image_style_url($style_name, $src) . '" alt="' . check_plain($img_data['alt']) . '" /></noscript>';
        $output .= '</span>';

        $img = $output;
      }
    }
    $content = str_replace($orig_imgs, $imgs, $content);
  }
  return $content;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function resp_img_ctools_plugin_api($owner, $api) {
  return array('version' => 1);
}

/**
 * Implements hook_entity_info_alter().
 */
function resp_img_entity_info_alter(&$entity_info) {
  // Support the media module
  $entity_info['file']['view modes']['media_responsive'] = array('label' => t('Responsive'), 'custom settings' => TRUE);
}

/**
 * Implements hook_block_view_alter().
 */
function resp_img_block_view_alter(&$data, $block) {
  if (variable_get('resp_img_block_enabled', 1) && isset($data['content'])) {
    if (is_string($data['content'])) {
      $data['content'] = _resp_img_replace_picture($data['content']);
    }
    else {
      $data['content']['#post_render'][] = 'resp_img_post_render';
    }
  }
}

