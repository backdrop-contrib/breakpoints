<?php

// Unique class to avoid double replacements.
define('RESP_IMG_CLASS', 'resp-img-picture');

/**
 * Implements hook_enable().
 */
function resp_img_enable() {
  config_install_default_config('resp_img');
}

/**
 * Implements hook_menu().
 */
function resp_img_menu() {
  $items = array();

  $items['admin/config/media/resp_img'] = array(
    'title' => 'Responsive images and styles',
    'description' => 'Define suffixes and breakpoints',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('resp_img_admin_suffixes'),
    'access arguments' => array('administer image styles'),
    'file' => 'resp_img.admin.inc',
  );

  foreach (list_themes() as $key => $theme) {
    $items['admin/config/media/resp_img/' . $theme->name] = array(
      'title' => $theme->info['name'],
      'page arguments' => array('resp_img_admin_suffixes', $theme->name),
      'type' => MENU_LOCAL_TASK,
      'access arguments' => array('administer image styles'),
      'file' => 'resp_img.admin.inc',
    );
  }

  $items['admin/config/media/resp_img/settings'] = array(
    'title' => 'Settings',
    'description' => 'Responsive images and styles',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('resp_img_admin_settings'),
    'access arguments' => array('administer image styles'),
    'file' => 'resp_img.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weigt' => 10,
  );

  $items['admin/config/media/resp_img/loadfromtheme'] = array(
    'title' => 'Load breakpoints from theme',
    'description' => 'Responsive images and styles',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('resp_img_admin_loadfromtheme'),
    'access arguments' => array('administer image styles'),
    'file' => 'resp_img.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weigt' => 20,
  );

  $items['admin/config/media/resp_img/create_style'] = array(
    'title' => 'Add responsive style',
    'description' => 'Add a responsive image style',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('resp_img_add_style_form'),
    'access arguments' => array('administer image styles'),
    'file' => 'resp_img.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weigt' => 30,
  );

  return $items;
}

/**
* Load general settings
*/
function resp_img_settings() {
  $config = config('resp_img');
  if ($config->isNew()) {
    return FALSE;
  }
  return (object)$config->get();
}

/**
* Save general settings
*/
function resp_img_settings_save($default_suffix, $block_enabled) {
  $config = config('resp_img');
  if ($config->isNew()) {
    return FALSE;
  }
  $config->set('default_suffix', $default_suffix);
  $config->set('block_enabled', $block_enabled);
  $config->save();
}

/**
* Load default suffix
*/
function resp_img_suffix_default() {
  $config = config('resp_img');
  if ($config->isNew()) {
    return FALSE;
  }
  return $config->get('default_suffix');
}

/**
* Load a single suffix
*/
function resp_img_suffix_load($name) {
  $config = config($name);
  if ($config->isNew()) {
    return FALSE;
  }
  return (object)$config->get();
}

/**
 * Load all suffixes
 */
function resp_img_suffix_load_all() {
  $suffixes = array();
  $suffix_names = config_get_storage_names_with_prefix('resp_img');
  foreach ($suffix_names as $suffix) {
    if ($suffix != 'resp_img') {
      $suffixes[$suffix] = resp_img_suffix_load($suffix);
    }
  }
  return $suffixes;
}

/**
 * Load all enabled suffixes from the theme
 */
function resp_img_suffix_load_all_from_theme($theme_key) {
  $suffixes = array();
  $themes = list_themes();
  if (isset($themes[$theme_key]->info['resp_img'])) {
    $theme_settings = $themes[$theme_key]->info['resp_img'];
    $saved_settings = theme_get_setting('resp_img', $theme_key);
    foreach ($theme_settings as $name => $breakpoint) {
      $suffix = new StdClass();
      $suffix->name = $name;
      $suffix->suffix = '__' . $name;
      $suffix->breakpoint = $breakpoint;
      $suffix->source = 'theme';
      if (theme_get_setting('resp_img_use_default', $theme_key)) {
        $suffix->status = TRUE;
      }
      else {
        $suffix->status = isset($saved_settings[$name]) && $saved_settings[$name];
      }
      $suffixes[$suffix->suffix] = $suffix;
    }
  }
  return $suffixes;
}

/**
 * Load all enabled suffixes from the theme
 */
function resp_img_suffix_load_all_active_from_theme($theme_key) {
  $suffixes = resp_img_suffix_load_all_from_theme($theme_key);
  $enabled = array();
  if (!empty($suffixes)) {
    foreach ($suffixes as $suffix) {
      if ($suffix->status) {
        $enabled[$suffix->suffix] = $suffix;
      }
    }
  }
  return $enabled;
}

/**
* Save a single suffix
*/
function resp_img_suffix_save($resp_img_suffix) {
  $config = config('resp_img.' . $resp_img_suffix->name);
  $is_new = $config->isNew();

  $config->set('name', $resp_img_suffix->name);
  $config->set('suffix', $resp_img_suffix->suffix);
  $config->set('breakpoint', $resp_img_suffix->breakpoint);
  $config->set('source', $resp_img_suffix->source);
  $config->set('status', $resp_img_suffix->status);
  $config->save();

  return $resp_img_suffix;
}

/**
* Delete a single suffix
*/
function resp_img_suffix_delete($resp_img_suffix) {
  $config = config($resp_img_suffix);
  $config->delete();
}

/**
* Toggle status of a single suffix
*/
function resp_img_suffix_toggle_status($resp_img_suffix) {
  $config = config($resp_img_suffix);
  $config->set('status', !$config->get('status'));
  $config->save();
}

/**
 * Load suffix and breakpoint for all suffixes
 */
function resp_img_suffix_load_all_breakpoints() {
  static $widths = array();
  if (empty($widths)) {
    $suffixes = resp_img_suffix_load_all();
    foreach ($suffixes as $suffix) {
      $widths[$suffix->suffix] = (int)$suffix->breakpoint;
    }
    arsort($widths);
  }
  return $widths;
}

/**
 * Add javascript for older browser support
 */
function resp_img_add_js() {
  static $added = FALSE;
  if (!$added) {
    $added = TRUE;
    drupal_add_js(drupal_get_path('module', 'resp_img') . '/picturefill/matchmedia.js', array('type' => 'file', 'weight' => -10, 'group' => JS_DEFAULT));
    drupal_add_js(drupal_get_path('module', 'resp_img') . '/picturefill/picturefill.js', array('type' => 'file', 'weight' => -10, 'group' => JS_DEFAULT));
    drupal_add_css(drupal_get_path('module', 'resp_img') . '/resp_img.css', array('type' => 'file', 'weight' => -10));
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function resp_img_theme_registry_alter(&$theme_registry) {
  foreach ($theme_registry as $key => $info) {
    if ($key == 'image_style') {
      $theme_registry[$key]['function'] = '_resp_img_pp_image_style';
    }
  }
}

/**
 * Implements hook_theme().
 */
function resp_img_theme() {
  return array(
    'picture' => array(
      'variables' => array(
        'style_name' => NULL,
        'path' => NULL,
        'width' => NULL,
        'height' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
      ),
    ),
  );
}

/**
 * Custom hook_image_style().
 * @see resp_img_theme_registry_alter
 */
function theme_picture($variables) {
  // add class so we know it got processed.
  if (!isset($variables['attributes'])) {
    $variables['attributes'] = array();
  }
  if (!isset($variables['attributes']['class'])) {
    $variables['attributes']['class'] = array();
  }
  $variables['attributes']['class'][] = RESP_IMG_CLASS;

  // Make sure that width and height are proper values
  if (isset($variables['width']) && empty($variables['width'])) {
    unset($variables['width']);
    unset($variables['height']);
  }
  elseif (isset($variables['height']) && empty($variables['height'])) {
    unset($variables['width']);
    unset($variables['height']);
  }

  $default_suffix = resp_img_suffix_default();
  $default_breakpoint = '';
  $images = array();
  $output = array();

  $output[] = '<picture alt="' . check_plain($variables['alt']) . '" title="' . check_plain($variables['title']) . '">';

  $suffixes = resp_img_suffix_load_all();
  // loop over all suffixes
  foreach ($suffixes as $suffix) {
    // detect the default one
    if ($suffix->suffix == $default_suffix) {
      $default_breakpoint = $suffix->breakpoint;
      $images[$suffix->breakpoint] = array(
        'image' => theme_image_style($variables),
      );
    }
    else {
      $new_image = $variables;
      $new_image['style_name'] = str_replace($default_suffix, $suffix->suffix, $variables['style_name']);
      $images[$suffix->breakpoint] = array(
        'image' => theme_image_style($new_image),
        'media' => '(min-width: ' . $suffix->breakpoint . ')',
      );
    }
  }
  // sort by size
  // @todo: how to handle mix of em and px?
  ksort($images);

  // add variants to the output
  foreach ($images as $min_width => $image) {
    if (isset($image['media']) && !empty($image['media'])) {
      $output[] = '<!-- <source media="' . $image['media'] . '" ' . str_replace('<img', '', $image['image']) . ' -->';
      $output[] = '<source media="' . $image['media'] . '" ' . str_replace('<img', '', $image['image']);
    }
    else {
      $output[] = '<!-- <source ' . str_replace('<img', '', $image['image']) . ' -->';
      $output[] = '<source ' . str_replace('<img', '', $image['image']);
    }
  }

  // output the default image as fallback
  // $output .= '<img src="' . image_style_url($variables['style_name'], $variables['uri']) . '" alt="' . check_plain($variables['alt']) . '" />';
  $output[] = '<noscript>' . $images[$default_breakpoint]['image'] . '</noscript>';
  $output[] = '</picture>';

  return implode("\n", $output);
}
/**
 * Custom hook_image_style().
 * @see resp_img_theme_registry_alter
 */
function _resp_img_pp_image_style($variables) {
  $default_suffix = resp_img_suffix_default();
  if (strpos($variables['style_name'], $default_suffix) !== FALSE) {
    // add javascript
    resp_img_add_js();

    $output = theme('picture', $variables);
  }
  else {
    $output = theme_image_style($variables);
  }
  return $output;
}

/**
 * Implements hook_form_alter().
 */
function resp_img_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'field_ui_field_edit_form') {
    if ($form['#instance']['widget']['module'] == 'text') {
      $form['resp_img'] = array(
        '#title' => t('Responsive images and styles'),
        '#type' => 'fieldset',
        '#collapsible' => FALSE,
      );

      $form['resp_img']['use_for_resp_img'] = array(
        '#type' => 'checkbox',
        '#title' => t('Apply responsive images and styles to this field'),
        //variable_get('resp_img_*entitytype*_*bundle*_*fieldname*, 0)
        '#default_value' => variable_get('resp_img_' . $form['instance']['entity_type']['#value'] . '_' . $form['instance']['bundle']['#value'] . '_' . $form['instance']['field_name']['#value'], 0),
        '#description' => t('If selected, responsive images and styles will be applied to the content of this field.'),
      );

      $form['#submit'][] = 'resp_img_add_entity_type_field';
    }

  }
}

function resp_img_add_entity_type_field($form, &$form_state) {
  variable_set('resp_img_' . $form['instance']['entity_type']['#value'] . '_' . $form['instance']['bundle']['#value'] . '_' . $form['instance']['field_name']['#value'],  $form_state['values']['use_for_resp_img']);
}

/**
 * Implements hook_entity_view_alter().
 */
function resp_img_entity_view_alter(&$build, $type) {
  foreach (element_children($build) as $child) {
    if (isset($build[$child]['#field_name'])) {
      if (variable_get('resp_img_' . $build['#entity_type'] . '_' . $build['#bundle'] . '_' . $build[$child]['#field_name'], 0)) {
        $build[$child]['#post_render'][] = 'resp_img_post_render';
      }
    }
  }
}

function resp_img_post_render($content, $element) {
  return _resp_img_replace_picture($content);
}

function _resp_img_replace_picture($content) {
  $result = array();
  preg_match_all('/<img[^>]+>/i', $content, $result);
  $orig_imgs = $imgs = $result[0];
  $default_suffix = resp_img_suffix_default();
  if (!empty($default_suffix)) {

    $sfx = resp_img_suffix_load_all();
    $suffixes = array();
    foreach ($sfx as $suffix) {
      $suffixes[] = $suffix->suffix;
    }
    $imgs = str_replace($suffixes, $default_suffix, $imgs);
    foreach ($imgs as &$img) {
      if (strpos($img, $default_suffix) !== FALSE) {
        resp_img_add_js();
        $xml  = simplexml_load_string('<image>' . html_entity_decode($img, ENT_QUOTES, "utf-8") . '</image>');
        $img_data = array();
        foreach($xml->img[0]->attributes() as $a => $b) {
          $img_data[$a] = (string)$b;
        }

        // Make sure image isn't processed yet.
        if (!array_key_exists('class', $img_data) || strpos($img_data['class'], RESP_IMG_CLASS) === FALSE) {
          // convert src to URI.
          // extract style name.
          $split_on = '/styles/';
          $src = substr($img_data['src'], strpos($img_data['src'], $split_on) + strlen($split_on));
          $src_data = explode('/', $src);
          $img_data['style_name'] = array_shift($src_data);
          $style_scheme = array_shift($src_data);
          $src = implode('/', $src_data);
          $img_data['uri'] = $style_scheme . '://' . $src;
          unset($img_data['src']);

          $img = theme('picture', $img_data);
        }
      }
    }
    $content = str_replace($orig_imgs, $imgs, $content);
  }
  return $content;
}

/**
 * Implements hook_entity_info_alter().
 */
function resp_img_entity_info_alter(&$entity_info) {
  // Support the media module
  $entity_info['file']['view modes']['media_responsive'] = array('label' => t('Responsive'), 'custom settings' => TRUE);
}

/**
 * Implements hook_block_view_alter().
 */
function resp_img_block_view_alter(&$data, $block) {
  if (variable_get('resp_img_block_enabled', 1) && isset($data['content'])) {
    if (is_string($data['content'])) {
      $data['content'] = _resp_img_replace_picture($data['content']);
    }
    else {
      $data['content']['#post_render'][] = 'resp_img_post_render';
    }
  }
}


/**
 * Implements hook_form_alter().
 */
function resp_img_form_system_theme_settings_alter(&$form, &$form_state) {
  if (isset($form_state['build_info']['args'][0]) && ($theme_key = $form_state['build_info']['args'][0])) {
    $themes = list_themes();
    if (isset($themes[$theme_key]->info['resp_img'])) {
      array_unshift($form['#submit'], 'resp_img_form_system_theme_settings_submit');

      $theme_settings = $themes[$theme_key]->info['resp_img'];
      $saved_settings = theme_get_setting('resp_img', $theme_key);

      $form['resp_img_fs'] = array(
        '#type' => 'fieldset',
        '#title' => t('Suffixes and breakpoints'),
        '#weight' => -1,
        '#tree' => TRUE,
      );
      $form['resp_img_fs']['resp_img_use_default'] = array(
        '#type' => 'checkbox',
        '#title' => t('Use the default settings'),
        '#default_value' => theme_get_setting('resp_img_use_default', $theme_key),
      );
      $form['resp_img_fs']['resp_img'] = array(
        '#type' => 'container',
        '#states' => array(
          'invisible' => array(
            'input[name="resp_img_fs[resp_img_use_default]"]' => array('checked' => TRUE),
          ),
        ),
      );
      foreach ($theme_settings as $key => $value) {
        $form['resp_img_fs']['resp_img'][$key] = array(
          '#type' => 'checkbox',
          '#title' => $key . ' (' . $value . ')',
          '#default_value' => $saved_settings[$key],
        );
      }
    }
  }
}

/**
 * Save settings, alter structure first().
 */
function resp_img_form_system_theme_settings_submit($form, &$form_state) {
  $form_state['values'] += $form_state['values']['resp_img_fs'];
  unset($form_state['values']['resp_img_fs']);
}