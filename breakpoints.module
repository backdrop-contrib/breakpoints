<?php

/**
 * @file
 * Breakpoints
 */

define('BREAKPOINTS_SOURCE_TYPE_THEME', 'theme');
define('BREAKPOINTS_SOURCE_TYPE_MODULE', 'module');
define('BREAKPOINTS_SOURCE_TYPE_CUSTOM', 'custom');
define('BREAKPOINTS_GROUP', 'group');

/**
 * Implements hook_ctools_plugin_directory().
 */
function breakpoints_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'export_ui') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function breakpoints_ctools_plugin_api($owner, $api) {
  return array('version' => 1);
}

/**
 * Implements hook_enable().
 * Import breakpoints from all enabled themes.
 */
function breakpoints_enable() {
  $themes = list_themes();
  breakpoints_themes_enabled(array_keys($themes));
}

/**
 * Implements hook_themes_enabled();
 * Import breakpoints from all new enabled themes.
 */
function breakpoints_themes_enabled($theme_list) {
  $themes = list_themes();
  foreach ($theme_list as $theme_key) {
    if (isset($themes[$theme_key]->info['breakpoints'])) {
      $weight = 0;
      $theme_settings = $themes[$theme_key]->info['breakpoints'];
      // Build a group for each theme
      $breakpoint_group = breakpoints_breakpoint_group_empty_object();
      $breakpoint_group->machine_name = $theme_key;
      $breakpoint_group->name = $themes[$theme_key]->info['name'];
      $breakpoint_group->type = BREAKPOINTS_SOURCE_TYPE_THEME;
      foreach ($theme_settings as $name => $media_query) {
        $breakpoint = breakpoints_breakpoint_empty_object();
        $breakpoint->name = $name;
        $breakpoint->breakpoint = $media_query;
        $breakpoint->source = $theme_key;
        $breakpoint->source_type = 'theme';
        $breakpoint->theme = '';
        $breakpoint->status = TRUE;
        $breakpoint->weight = $weight++;
        $breakpoint->machine_name = breakpoints_breakpoint_config_name($breakpoint);
        breakpoints_breakpoint_save($breakpoint);
        $breakpoint_group->breakpoints[] = $breakpoint->machine_name;
      }
      breakpoints_breakpoint_group_save($breakpoint_group);
    }
  }
}

/**
 * Implements hook_themes_disabled();
 * Remove breakpoints from all disabled themes.
 */
function breakpoints_themes_disabled($theme_list) {
  $themes = list_themes();
  foreach ($theme_list as $theme_key) {
    $breakpoints = breakpoints_breakpoint_load_all_theme($theme_key);
    foreach ($breakpoints as $breakpoint) {
      breakpoints_breakpoint_delete($breakpoint, $theme_key);
    }
    breakpoints_breakpoint_group_delete_by_name($theme_key);
  }
  menu_cache_clear_all();
}

/**
 * Implements hook_menu().
 */
function breakpoints_menu() {
  $items = array();

  // @todo: link to all breakpoints and a list of all groups
  // cf theme settings page
  $items['admin/config/media/breakpoints'] = array(
    'title' => 'Breakpoints',
    'description' => 'Manage breakpoints',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('breakpoints_admin_breakpoints'),
    'access arguments' => array('administer image styles'),
    'file' => 'breakpoints.admin.inc',
    'weight' => 10,
  );

  $items['admin/config/media/breakpoints/create_style'] = array(
    'title' => 'Add responsive style',
    'description' => 'Add a responsive image style',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('breakpoints_add_style_form'),
    'access arguments' => array('administer image styles'),
    'file' => 'breakpoints.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );

  $items['admin/config/media/breakpoints/groups'] = array(
    'title' => 'Groups',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 10,
  );

  $items['admin/config/media/breakpoints/groups/global'] = array(
    'title' => 'All breakpoints',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  $items['admin/config/media/breakpoints/groups/add'] = array(
    'title' => 'Add a new group',
    'page arguments' => array('breakpoints_admin_breakpoint_group_edit_form'),
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer image styles'),
    'file' => 'breakpoints.admin.inc',
    'weight' => 99,
  );
  $items['admin/config/media/breakpoints/%/%'] = array(
    'page arguments' => array('breakpoints_admin_breakpoint_actions_form', '', 4, 5),
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer image styles'),
    'file' => 'breakpoints.admin.inc',
    'weight' => 15,
  );

  $breakpoint_groups = breakpoints_breakpoint_group_load_all();
  foreach ($breakpoint_groups as $breakpoint_group_name => $breakpoint_group) {
    if (!empty($breakpoint_group->machine_name)) {
      $items['admin/config/media/breakpoints/groups/' . $breakpoint_group->machine_name] = array(
        'title' => $breakpoint_group->name,
        'page arguments' => array('breakpoints_admin_breakpoints', $breakpoint_group->machine_name),
        'type' => MENU_LOCAL_TASK,
        'access arguments' => array('administer image styles'),
        'file' => 'breakpoints.admin.inc',
        'weight' => 15,
      );
      $items['admin/config/media/breakpoints/groups/' . $breakpoint_group->machine_name . '/edit'] = array(
        'title' => 'Edit ' . $breakpoint_group->name,
        'page arguments' => array('breakpoints_admin_breakpoint_group_edit_form', $breakpoint_group->machine_name),
        'type' => MENU_CALLBACK,
        'access arguments' => array('administer image styles'),
        'file' => 'breakpoints.admin.inc',
        'weight' => 15,
      );
      $items['admin/config/media/breakpoints/groups/' . $breakpoint_group->machine_name . '/delete'] = array(
        'title' => 'Delete ' . $breakpoint_group->name,
        'page arguments' => array('breakpoints_admin_breakpoint_group_delete_form', $breakpoint_group->machine_name),
        'type' => MENU_CALLBACK,
        'access arguments' => array('administer image styles'),
        'file' => 'breakpoints.admin.inc',
        'weight' => 15,
      );
      $items['admin/config/media/breakpoints/groups/' . $breakpoint_group->machine_name . '/%/%'] = array(
        'page arguments' => array('breakpoints_admin_breakpoint_actions_form', $breakpoint_group->machine_name, 6, 7),
        'type' => MENU_CALLBACK,
        'access arguments' => array('administer image styles'),
        'file' => 'breakpoints.admin.inc',
        'weight' => 15,
      );
    }
  }

  return $items;
}

/**
 * Load general settings.
 */
function breakpoints_settings() {
  $config = new StdClass;
  $config->default_breakpoint = variable_get('default_breakpoint', '');
  $config->block_enabled = variable_get('block_enabled', FALSE);
  $config->multipliers = variable_get('multipliers', array('1x', '1.5x', '2x'));
  return $config;
}

/**
 * Save general settings.
 */
function breakpoints_settings_save($default_breakpoint, $block_enabled) {
  variable_set('default_breakpoint', $default_breakpoint);
  variable_set('block_enabled', $block_enabled);
}

/**
 * Sort breakpoints by weight.
 */
function _breakpoints_sort_by_weight($a, $b) {
  if (isset($a->weight) && isset($b->weight)) {
    if ($a->weight == $b->weight) {
      return 0;
    }
    return ($a->weight < $b->weight) ? -1 : 1;
  }
  return 0;
}

/**
 * Construct config name.
 */
function breakpoints_breakpoint_config_name($breakpoints_breakpoint) {
  if (is_string($breakpoints_breakpoint)) {
    return $breakpoints_breakpoint;
  }
  else {
    return 'breakpoints'
      . '.' . $breakpoints_breakpoint->source_type
      . '.' . $breakpoints_breakpoint->source
      . '.' . $breakpoints_breakpoint->name;
  }
}

/**
 * Load a single breakpoint.
 */
function breakpoints_breakpoint_load($name, $source, $source_type) {
  return breakpoints_breakpoint_load_by_fullkey(breakpoints_breakpoint_config_name($name, $source, $source_type));
}

/**
 * Load a single breakpoint using the full config key.
 */
function breakpoints_breakpoint_load_by_fullkey($machine_name) {
  $sql = 'SELECT * FROM {breakpoints} WHERE machine_name = :machine_name';
  $result = db_query($sql, array(':machine_name' => $machine_name));
  if ($result) {
    $data = $result->fetchObject();
    $data->multipliers = unserialize($data->multipliers);
    return $data;
  }
  else {
    return FALSE;
  }
}

/**
 * Load all breakpoints.
 */
function breakpoints_breakpoint_load_all($theme_key = '') {
  $breakpoints_user = breakpoints_breakpoint_load_all_custom();
  $breakpoints_module = breakpoints_breakpoint_load_all_module();
  $breakpoints_theme = breakpoints_breakpoint_load_all_theme($theme_key);
  $breakpoints = array_merge($breakpoints_theme, $breakpoints_module, $breakpoints_user);
  uasort($breakpoints, '_breakpoints_sort_by_weight');
  return $breakpoints;
}

/**
 * Load all enabled breakpoints.
 */
function breakpoints_breakpoint_load_all_active($theme_key = '') {
  $breakpoints = breakpoints_breakpoint_load_all($theme_key);
  $enabled = array();
  if (!empty($breakpoints)) {
    foreach ($breakpoints as $breakpoint_name => $breakpoint) {
      if ($breakpoint->status) {
        $enabled[$breakpoint_name] = $breakpoint;
      }
    }
  }
  return $enabled;
}

/**
 * Load all breakpoints by source type.
 */
function _breakpoints_breakpoint_load_all_by_type($source_type, $source = '') {
  $sql = 'SELECT * FROM {breakpoints} WHERE source_type = :source_type';
  $arg = array(':source_type' => $source_type);
  if (!empty($source)) {
    $sql .= ' AND source = :source';
    $arg[':source'] = $source;
  }
  $result = db_query($sql, $arg);
  if ($result) {
    $breakpoints = array();
    while ($data = $result->fetchObject()) {
      $data->multipliers = unserialize($data->multipliers);
      $breakpoints[$data->machine_name] = $data;
    }
    return $breakpoints;
  }
  else {
    return FALSE;
  }
}

/**
 * Load all custom breakpoints.
 */
function breakpoints_breakpoint_load_all_custom() {
  $breakpoints = _breakpoints_breakpoint_load_all_by_type(BREAKPOINTS_SOURCE_TYPE_CUSTOM);
  return $breakpoints;
}

/**
 * Load all user defined breakpoints.
 */
function breakpoints_breakpoint_load_all_module() {
  return _breakpoints_breakpoint_load_all_by_type(BREAKPOINTS_SOURCE_TYPE_MODULE);
}

/**
 * Load all breakpoints from the theme.
 */
function breakpoints_breakpoint_load_all_theme($theme_key = '') {
  return _breakpoints_breakpoint_load_all_by_type(BREAKPOINTS_SOURCE_TYPE_THEME, $theme_key);
}

/**
 * Empty breakpoint object.
 */
function breakpoints_breakpoint_empty_object() {
  return (object)breakpoints_breakpoint_empty_array();
}

/**
 * Empty breakpoint array.
 */
function breakpoints_breakpoint_empty_array() {
  return array(
    'name' => '',
    'breakpoint' => '',
    'breakpoint' => '',
    'source' => '',
    'source_type' => '',
    'theme' => '',
    'status' => '',
    'weight' => 0,
    'theme' => '',
    'multipliers' => '',
  );
}

/**
 * Save a single breakpoint.
 */
function breakpoints_breakpoint_save($breakpoint) {
  if (!isset($breakpoint->machine_name) || empty($breakpoint->machine_name)) {
    $breakpoint->machine_name = breakpoints_breakpoint_config_name($breakpoint);
  }
  $update = (isset($breakpoint->id) && is_numeric($breakpoint->id)) ? array('id') : array();
  $breakpoint->multipliers = serialize($breakpoint->multipliers);
  $record = drupal_write_record('breakpoints', $breakpoint, $update);
  $record->multipliers = unserialize($record->multipliers);
}

/**
 * Delete a single breakpoint.
 */
function breakpoints_breakpoint_delete($breakpoint) {
  $name = breakpoints_breakpoint_config_name($breakpoint);
  return breakpoints_breakpoint_delete_by_fullkey($name);
}

/**
 * Delete a single breakpoint.
 */
function breakpoints_breakpoint_delete_by_fullkey($key) {
  if (!empty($key)) {
    $sql = "DELETE FROM {breakpoints} where machine_name = :key";
    db_query($sql, array(':key' => $key));
  }
}

/**
 * Toggle status of a single breakpoint.
 */
function breakpoints_breakpoint_toggle_status($machine_name) {
  $breakpoint = breakpoints_breakpoint_load_by_fullkey($machine_name);
  if ($breakpoint) {
    $breakpoint->status = !$breakpoint->status;
    breakpoints_breakpoint_save($breakpoint);
  }
}


/**
 * Empty breakpoint group object.
 */
function breakpoints_breakpoint_group_empty_object() {
  return (object)breakpoints_breakpoint_group_empty_array();
}

/**
 * Empty breakpoint group array.
 */
function breakpoints_breakpoint_group_empty_array() {
  return array(
    'machine_name' => '',
    'name' => '',
    'breakpoints' => array(),
    'type' => 'custom',
  );
}

/**
 * Check if a group name already exists.
 */
function breakpoints_breakpoint_group_name_exists($machine_name) {
  // Check for reserved words.
  if ($machine_name == 'global' || $machine_name == 'add') {
    return TRUE;
  }
  // Check if group name is used before.
  $group_check = breakpoints_breakpoint_group_load($machine_name);
  if ($group_check && isset($group_check->machine_name) && !empty($group_check->machine_name)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Load all breakpoint groups.
 */
function breakpoints_breakpoint_group_load_all() {
  $sql = 'SELECT * FROM {breakpoint_group}';
  $result = db_query($sql);
  if ($result) {
    $breakpoint_groups = array();
    while ($data = $result->fetchObject()) {
      $data->breakpoints = unserialize($data->breakpoints);
      $breakpoint_groups[$data->machine_name] = $data;
    }
    return $breakpoint_groups;
  }
  else {
    return FALSE;
  }
}

/**
 * Load a single breakpoint group.
 */
function breakpoints_breakpoint_group_load($name) {
  $sql = 'SELECT * FROM {breakpoint_group} WHERE name = :name';
  $result = db_query($sql, array(':name' => $name));
  if ($result) {
    $data = $result->fetchObject();
    $data->breakpoints = unserialize($data->breakpoints);
    return $data;
  }
  else {
    return FALSE;
  }
}

/**
 * Load a single breakpoint group using the full config key.
 */
function breakpoints_breakpoint_group_load_by_fullkey($key) {
  $sql = 'SELECT * FROM {breakpoint_group} WHERE machine_name = :key';
  $result = db_query($sql, array(':key' => $key));
  if ($result) {
    $data = $result->fetchObject();
    $data->breakpoints = unserialize($data->breakpoints);
    return $data;
  }
  else {
    return FALSE;
  }
}

/**
 * Save a single breakpoint group.
 */
function breakpoints_breakpoint_group_save($breakpoint_group) {
  $update = (isset($breakpoint_group->id) && is_numeric($breakpoint_group->id)) ? array('id') : array();
  $breakpoint_group->breakpoints = serialize($breakpoint_group->breakpoints);
  $record = drupal_write_record('breakpoint_group', $breakpoint_group, $update);
  $record->breakpoints = unserialize($record->breakpoints);
  return $record;
}

/**
 * Delete a single breakpoint group.
 */
function breakpoints_breakpoint_group_delete($breakpoint_group) {
  $name = $breakpoint_group->machine_name;
  return breakpoints_breakpoint_group_delete_by_fullkey($name);
}

/**
 * Delete a single breakpoint group by fullkey.
 */
function breakpoints_breakpoint_group_delete_by_name($machine_name) {
  $name = $machine_name;
  return breakpoints_breakpoint_group_delete_by_fullkey($name);
}

/**
 * Delete a single breakpoint group by fullkey.
 */
function breakpoints_breakpoint_group_delete_by_fullkey($key) {
  if (!empty($key)) {
    $sql = "DELETE FROM {breakpoint_group} where machine_name = :key";
    db_query($sql, array(':key' => $key));
  }
}

/**
 * Implements hook_theme().
 */
function breakpoints_theme() {
  return array(
    'breakpoints_admin_breakpoints_table' => array(
      'render element' => 'form',
      'theme_key' => NULL,
    ),
  );
}

